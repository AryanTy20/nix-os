{ config, pkgs, inputs, ... }:

{
  ##################
  # Import Hardware Configuration
  ##################
  # This imports hardware-specific configurations generated during system installation.
  # It includes information such as disk partitions, hardware drivers, etc.
  imports =
    [
      ./hardware-configuration.nix   # This imports the hardware configuration generated by `nixos-generate-config`
      inputs.home-manager.nixosModules.default
    ];

  ##################
  # System Bootloader
  ##################
  # Configures the bootloader settings, specifically systemd-boot.
  # Ensures the EFI system can be modified if needed.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  ##################
  # Networking Configuration
  ##################
  # Set the system's hostname. This is the name that will appear on the network.
  networking.hostName = "hunter";
  
  # Enable NetworkManager, a service that handles network configuration and connectivity.
  networking.networkmanager.enable = true;

  ##################
  # Time and Localization Settings
  ##################
  # Set the system's time zone to "Asia/Kolkata".
  time.timeZone = "Asia/Kolkata";

  # Set the system's default locale. This will affect language and formatting of various settings.
  i18n.defaultLocale = "en_IN";  # Set the default locale to en_IN.
  
  # Extra locale settings to handle specific cultural formatting (addresses, time, etc.) for the US region.
  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_IN";
    LC_IDENTIFICATION = "en_IN";
    LC_MEASUREMENT = "en_IN";
    LC_MONETARY = "en_IN";
    LC_NAME = "en_IN";
    LC_NUMERIC = "en_IN";
    LC_PAPER = "en_IN";
    LC_TELEPHONE = "en_IN";
    LC_TIME = "en_IN";
  };
  

  ##################
  # X11 and Desktop Environment
  ##################
  # Enable the X11 windowing system, which is necessary for graphical user interfaces.
  services.xserver.enable = true;

  # Enable the GNOME desktop environment with GDM as the display manager (login screen).
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome.enable = true;

  # Configure the keyboard layout for X11 to use the US layout.
  services.xserver.xkb = {
    layout = "us";
    variant = "";  # Default variant for the US layout.
  };

  ##################
  # Printing and Sound Configuration
  ##################
  # Enable CUPS (Common Unix Printing System) to allow printing functionality.
  services.printing.enable = true;

  # Disable PulseAudio and use PipeWire for sound management. PipeWire is a modern sound server.
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;  # Enable real-time scheduling for audio applications.
  
  # Configure PipeWire with ALSA support and enable PulseAudio compatibility.
  services.pipewire = {
    enable = true;
    alsa.enable = true;  # Enable ALSA (Advanced Linux Sound Architecture) support.
    alsa.support32Bit = true;  # Enable 32-bit support for ALSA.
    pulse.enable = true;  # Enable PulseAudio compatibility via PipeWire.
  };

  ##################
  # User Configuration and System Packages
  ##################
  # Define a normal user account called 'aryan'.
  # User 'aryan' will have access to the "wheel" group for sudo privileges and "networkmanager" for network management.
  users.users.aryan = {
    isNormalUser = true;
    description = "aryan";  # A description for the user.
    extraGroups = [ "networkmanager" "wheel" ];  # Grant sudo privileges by adding to the "wheel" group.
    packages = with pkgs; [
      # Add more user-specific packages if needed, such as email clients, etc.
      # thunderbird
    ];
  };

  # Enable Firefox as a program for all users.
  programs.firefox.enable = true;

  # Define system-wide packages to be installed on the system.
  environment.systemPackages = with pkgs; [
    wget     # Command-line tool for downloading files from the web.
    git      # Version control system to manage code repositories.
    curl     # Tool for transferring data with URLs.
    btop     # Resource monitor for system processes and usage.
    neofetch # A command-line system information tool.
    vscode   # Visual Studio Code, a popular code editor (unfree).
    home-manager
  ];

  # Allow Visual Studio Code (VSCode), which is an "unfree" package, to be installed.
  nixpkgs.config.allowUnfreePredicate =
    pkg: builtins.elem (pkgs.lib.getName pkg) [
      "vscode"  # Allow installation of VSCode.
    ];

  ##################
  # Services Configuration
  ##################
  # Uncomment to enable OpenSSH for remote access (e.g., SSH server for remote login).
  # services.openssh.enable = true;

  # Open specific firewall ports if needed. (Uncomment and configure as required)
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];

  # Disable the firewall if necessary (not recommended for most systems).
  # networking.firewall.enable = false;

  # Allow nix os flakes
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  ##################
  # System Versioning
  ##################
  # This defines the version of the NixOS release to ensure compatibility with the system's state.
  # Typically, this should be set to the version of NixOS you are using.
  system.stateVersion = "24.11";  # Ensure compatibility with your NixOS release.

   # HOME MANAGER FOR MANAGING .config FILES
  home-manager = {
  # also pass inputs to home-manager modules
  extraSpecialArgs = {inherit inputs;};
   users = {
    "aryan" = import ./home.nix;
   };
  };
}
